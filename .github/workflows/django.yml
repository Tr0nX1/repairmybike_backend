# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# env:
#   PYTHON_VERSION: '3.11'
#   POSTGRES_PASSWORD: postgres
#   POSTGRES_USER: postgres
#   POSTGRES_DB: IjPyvqxtRYYbdpCHdGVVoLuUiwkMJRTs



# # DB_NAME=railway
# # DB_USER=postgres
# # DB_PASSWORD=IjPyvqxtRYYbdpCHdGVVoLuUiwkMJRTs
# # DB_HOST=postgres.railway.internal
# # DB_PORT=5432


# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
#           POSTGRES_USER: ${{ env.POSTGRES_USER }}
#           POSTGRES_DB: ${{ env.POSTGRES_DB }}
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432
      
#       redis:
#         image: redis:7-alpine
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}
#         cache: 'pip'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install coverage pytest-django flake8 black isort

#     - name: Set up environment variables
#       run: |
#         echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
#         echo "DEBUG=True" >> $GITHUB_ENV
#         echo "DATABASE_URL=postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> $GITHUB_ENV
#         echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV

#     - name: Run code formatting checks
#       run: |
#         black --check --diff .
#         isort --check-only --diff .

#     - name: Run linting
#       run: |
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

#     - name: Run migrations
#       run: |
#         python manage.py makemigrations --check --dry-run
#         python manage.py migrate

#     - name: Run tests with coverage
#       run: |
#         coverage run --source='.' manage.py test
#         coverage report --show-missing
#         coverage xml

#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v3
#       with:
#         file: ./coverage.xml
#         flags: unittests
#         name: codecov-umbrella

#   security-scan:
#     runs-on: ubuntu-latest
#     needs: test
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}

#     - name: Install security tools
#       run: |
#         python -m pip install --upgrade pip
#         pip install safety bandit

#     - name: Run safety check
#       run: |
#         pip install -r requirements.txt
#         safety check

#     - name: Run bandit security scan
#       run: |
#         bandit -r . -f json -o bandit-report.json || true
#         bandit -r . -f txt

#     - name: Upload bandit report
#       uses: actions/upload-artifact@v3
#       if: always()
#       with:
#         name: bandit-security-report
#         path: bandit-report.json

#   build-and-deploy:
#     runs-on: ubuntu-latest
#     needs: [test, security-scan]
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Collect static files
#       run: |
#         python manage.py collectstatic --noinput
#       env:
#         SECRET_KEY: ${{ secrets.SECRET_KEY }}
#         DEBUG: False

#     - name: Build Docker image (if Dockerfile exists)
#       run: |
#         if [ -f Dockerfile ]; then
#           docker build -t repairmybike-backend:${{ github.sha }} .
#           echo "Docker image built successfully"
#         else
#           echo "No Dockerfile found, skipping Docker build"
#         fi

#     # Uncomment and configure for your deployment platform
#     # - name: Deploy to production
#     #   run: |
#     #     # Add your deployment commands here
#     #     # Examples:
#     #     # - Deploy to Heroku
#     #     # - Deploy to AWS
#     #     # - Deploy to DigitalOcean
#     #     # - Deploy to your VPS
#     #     echo "Add deployment commands here"

#   notify:
#     runs-on: ubuntu-latest
#     needs: [test, security-scan, build-and-deploy]
#     if: always()
    
#     steps:
#     - name: Notify on success
#       if: needs.test.result == 'success' && needs.security-scan.result == 'success'
#       run: |
#         echo "✅ All checks passed! Ready for deployment."

#     - name: Notify on failure
#       if: needs.test.result == 'failure' || needs.security-scan.result == 'failure'
#       run: |
#         echo "❌ Some checks failed. Please review the logs."
#         exit 1



name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: railway
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools
          pip install -r requirements.txt
          pip install psycopg[binary]
          

      - name: Run migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python -m pytest -c pytest.ini